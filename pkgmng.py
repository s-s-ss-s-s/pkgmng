import os
import shutil
import zipfile
import hcl2
import hashlib
import requests
import datetime
import subprocess


# --- –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è SHA256 ---
def compute_sha256(file_path):
    sha256 = hashlib.sha256()
    with open(file_path, "rb") as f:
        while chunk := f.read(4096):
            sha256.update(chunk)
    return sha256.hexdigest()


# --- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ZIP-–∞—Ä—Ö–∏–≤–∞ ---
def extract_package(zip_path, extract_to="./extracted"):
    if os.path.exists(extract_to):
        shutil.rmtree(extract_to)
    os.makedirs(extract_to)

    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        zip_ref.extractall(extract_to)

    print(f"‚úÖ –ê—Ä—Ö–∏–≤ {zip_path} —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {extract_to}")
    return extract_to


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ HCL-–º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ ---
def load_manifest(manifest_path):
    with open(manifest_path, "r") as f:
        return hcl2.load(f)


# --- –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ---
def download_file(url, dest_path, expected_sha256=None):
    print(f"üîΩ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {url}")
    response = requests.get(url, stream=True)
    response.raise_for_status()

    with open(dest_path, "wb") as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)

    if expected_sha256:
        computed_sha = compute_sha256(dest_path)
        if computed_sha != expected_sha256:
            os.remove(dest_path)
            raise ValueError(f"‚ùå SHA256 –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_sha256}, –ø–æ–ª—É—á–µ–Ω–æ: {computed_sha}")

    print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {dest_path}")


# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Go ---
def check_go_installed():
    try:
        result = subprocess.run(["go", "version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä Go: {result.stdout.strip()}")
            return True
    except FileNotFoundError:
        return False
    return False


# --- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Go ---
def install_go(go_info):
    go_url = go_info["source"]
    go_sha256 = go_info["sha256"]
    go_archive = "/tmp/go.tar.gz"

    download_file(go_url, go_archive, go_sha256)

    if os.path.exists("/usr/local/go"):
        shutil.rmtree("/usr/local/go")

    os.system(f"tar -C /usr/local -xzf {go_archive}")
    os.environ["PATH"] += os.pathsep + "/usr/local/go/bin"
    print("‚úÖ –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä Go —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


# --- –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ Go-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def build_go_project(project_path, entry_point, output_binary):
    os.chdir(project_path)
    os.makedirs("bin", exist_ok=True)

    binary_path = f"bin/{output_binary}"
    build_cmd = f"go build -o {binary_path} {entry_point}"
    result = subprocess.run(build_cmd, shell=True)

    if result.returncode != 0:
        raise RuntimeError("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏!")

    print(f"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–∏–Ω–∞—Ä–Ω–∏–∫: {binary_path}")
    return os.path.join(project_path, binary_path)


# --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ HCL ---
def create_manifest(binary_path, entry_point, dependencies):
    manifest_content = f"""
    name = "my-go-app"
    version = "1.0.0"
    entry_point = "{entry_point}"
    date = "{datetime.datetime.now().isoformat()}"

    output_binary = "{os.path.basename(binary_path)}"
    sha256 = "{compute_sha256(binary_path)}"

    supported_os = ["linux"]
    supported_architectures = ["amd64"]

    dependencies = [
        {{"name" = "{dependencies[0]['name']}", "version" = "{dependencies[0]['version']}", "source" = "{dependencies[0]['source']}", "sha256" = "{dependencies[0]['sha256']}"}}
    ]
    """

    with open("manifest.hcl", "w") as f:
        f.write(manifest_content.strip())

    print("‚úÖ –§–∞–π–ª manifest.hcl —Å–æ–∑–¥–∞–Ω!")


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def run_binary(binary_path):
    print(f"üöÄ –ó–∞–ø—É—Å–∫: {binary_path}")
    subprocess.run([binary_path])


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
def main(zip_path):
    extracted_path = extract_package(zip_path)
    manifest_path = os.path.join(extracted_path, "manifest.hcl")

    if not os.path.exists(manifest_path):
        raise FileNotFoundError("‚ùå –§–∞–π–ª manifest.hcl –Ω–µ –Ω–∞–π–¥–µ–Ω!")


    manifest = load_manifest(manifest_path)
    print(f"üìú –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {manifest}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Go
    if not check_go_installed():
        install_go(manifest["dependencies"][0])  # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    binary_path = build_go_project(extracted_path, manifest["entry_point"], manifest["output_binary"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHA256
    computed_sha256 = compute_sha256(binary_path)
    if computed_sha256 != manifest["sha256"]:
        print("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
    else:
        print("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π SHA256
    create_manifest(binary_path, manifest["entry_point"], manifest["dependencies"])

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    run_binary(binary_path)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    zip_file = "test-package.zip"  # –£–∫–∞–∂–∏ —Å–≤–æ–π ZIP-–∞—Ä—Ö–∏–≤
    main(zip_file)