import json
import os
import shutil
import zipfile
import hcl
import hashlib
import requests
import datetime
import subprocess



# --- –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è SHA256 ---
def compute_sha256(file_path):
    print("–ü–†–û–ë–õ–ï–ú–ê –¢–£–¢", os.getcwd())
    sha256 = hashlib.sha256()
    with open(file_path, "rb") as f:
        while chunk := f.read(4096):
            sha256.update(chunk)
    return sha256.hexdigest()


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ HCL-–º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ ---
def load_manifest(manifest_path):
    with open(manifest_path, "r") as f:
        parsed_data = hcl.load(f)

        # Convert to JSON string (optional) or directly return as dictionary
        json_data = json.dumps(parsed_data, indent=2)

        return parsed_data  # or return json_data if you want a JSON string
       # return hcl.load(f)


# --- –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ---
def download_file(url, dest_path, expected_sha256=None):
    print(f"üîΩ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {url}")
    response = requests.get(url, stream=True)
    response.raise_for_status()

    with open(dest_path, "wb") as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
    print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {dest_path}")


# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Go ---
def check_go_installed():
    try:
        result = subprocess.run(["go", "version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä Go: {result.stdout.strip()}")
            return True
    except FileNotFoundError:
        return False
    return False


# --- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Go ---
def install_go(go_info):
    go_url = go_info["source"]
    go_sha256 = go_info["sha256"]
    go_archive = "/tmp/go.tar.gz"

    download_file(go_url, go_archive, go_sha256)

    if os.path.exists("/usr/local/go"):
        shutil.rmtree("/usr/local/go")

    os.system(f"tar -C /usr/local -xzf {go_archive}")
    os.environ["PATH"] += os.pathsep + "/usr/local/go/bin"
    print("‚úÖ –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä Go —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


# --- –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ Go-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def build_go_project(project_path, entry_point, output_binary):
    os.chdir(project_path)
    print("–ó–ê–ü–£–°–ö–ê–ï–ú –ò–ó", os.getcwd())
    os.makedirs("bin", exist_ok=True)
#    print("BINARY_PATH: ", binary_path)
    binary_path = f"bin/{output_binary}"
    build_cmd = f"go build -o {binary_path} {entry_point}"
    result = subprocess.run(build_cmd, shell=True)

    if result.returncode != 0:
        raise RuntimeError("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏!")

    print(f"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–∏–Ω–∞—Ä–Ω–∏–∫: {binary_path}")
    return os.path.join(project_path, binary_path)


# --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ HCL ---
def create_manifest(binary_path, entry_point, dependencies):
    manifest_content = f"""
    name = "my-go-app"
    version = "1.0.0"
    entry_point = "{entry_point}"
    date = "{datetime.datetime.now().isoformat()}"

    output_binary = "{os.path.basename(binary_path)}"
    sha256 = "{compute_sha256("./bin/buildprpj")}"

    supported_os = ["linux"]
    supported_architectures = ["amd64"]

    dependencies = [
        {{"name" = "{dependencies[0]['name']}", "version" = "{dependencies[0]['version']}", "source" = "{dependencies[0]['source']}", "sha256" = "{dependencies[0]['sha256']}"}}
    ]
    """

    with open("manifest.hcl", "w") as f:
        f.write(manifest_content.strip())

    print("‚úÖ –§–∞–π–ª manifest.hcl —Å–æ–∑–¥–∞–Ω!")


# --- –§—É–Ω–∫—Ü–∏—è —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ ZIP ---
def create_zip_package(source_dir, output_zip):
    with zipfile.ZipFile(output_zip, "w", zipfile.ZIP_DEFLATED) as zipf:
        for root, _, files in os.walk(source_dir):
            for file in files:
                file_path = os.path.join(root, file)
                zipf.write(file_path, os.path.relpath(file_path, source_dir))

    print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {output_zip}")


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def run_binary(binary_path):
    print("SHYAGA TYT: ", os.getcwd())
    os.chdir('..')
    print(f"üöÄ –ó–∞–ø—É—Å–∫: {binary_path}")
    subprocess.run([binary_path])


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
def main(zip_path):
    extracted_path = "./extracted"

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ZIP, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
    if os.path.exists(zip_path):
        # –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        shutil.rmtree(extracted_path, ignore_errors=True)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.makedirs(extracted_path)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(extracted_path)

        print(f"‚úÖ –ê—Ä—Ö–∏–≤ {zip_path} —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {extracted_path}")

        # –ü–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for root, dirs, files in os.walk(extracted_path):
            for file in files:
                # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                source_file = os.path.join(root, file)
                destination_file = os.path.join(extracted_path, file)

                # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤
                if os.path.exists(destination_file):
                    print(f"‚ùå –§–∞–π–ª {destination_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                shutil.move(source_file, destination_file)

        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        for root, dirs, files in os.walk(extracted_path, topdown=False):
            for dir in dirs:
                os.rmdir(os.path.join(root, dir))

    manifest_path = os.path.join(extracted_path, "manifest.hcl")


    if not os.path.exists(manifest_path):
        raise FileNotFoundError("‚ùå –§–∞–π–ª manifest.hcl –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    manifest = load_manifest(manifest_path)
    print(f"üìú –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {manifest}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Go
    if not check_go_installed():
        install_go(manifest["dependencies"][0])  # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    binary_path = build_go_project(extracted_path, manifest["entry_point"], manifest["output_binary"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHA256
    computed_sha256 = compute_sha256("./bin/buildprpj")
    if computed_sha256 != manifest["sha256"]:
        print("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
    else:
        print("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π SHA256
    create_manifest(binary_path, manifest["entry_point"], manifest["dependencies"])

    # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ ZIP
    output_zip = "package.zip"
    create_zip_package(extracted_path, output_zip)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    run_binary(binary_path)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    zip_file = "test-package.zip"
    main(zip_file)